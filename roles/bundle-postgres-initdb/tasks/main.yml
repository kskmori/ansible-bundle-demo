- name: create NFS mount point
  file: path=/mnt/nfs state=directory

- name: mount NFS storage as a shared volume
  mount:
    path: /mnt/nfs
    src: "{{ NFS_SERVER }}:{{ NFS_EXPORT_DIR }}"
    fstype: nfs
    state: mounted

# create PGDATA of the container on the shared drive
# the directory name should be matched to the one generated by Pacemaker
# 26 is the postgres user id in the container
- name: create PGDATA on the shared drive
  file:
    path: /mnt/nfs/postgres-bundle-0
    state: directory
    owner: 26
    group: 26
    mode: 0700
  run_once: true

- name: check if PGDATA is already initialized
  stat: path=/mnt/nfs/postgres-bundle-0/PG_VERSION
  register: pg_version
  run_once: true

- name: initialize the database
  command: docker run --name pg-init -v /mnt/nfs/postgres-bundle-0:/var/lib/pgsql/data pcmktest:postgres runuser postgres -c "initdb --pgdata=/var/lib/pgsql/data"
  when: not pg_version.stat.exists
  run_once: true

- name: remove the initialization container
  command: docker rm pg-init
  when: not pg_version.stat.exists
  run_once: true
  # TODO: better error handling not to leave pg-init when initdb failed

# minimum PostgreSQL configuration
# BE CAREFUL!: this is only for demo
- name: allow the database access from anywhere
  lineinfile:
    dest: /mnt/nfs/postgres-bundle-0/pg_hba.conf
    regexp: "^host all all all trust"
    line: "host all all all trust"
    state: present
  run_once: true

- name: listen on the network
  lineinfile:
    dest: /mnt/nfs/postgres-bundle-0/postgresql.conf
    regexp: "^{{ item.key }}[ =]"
    line: "{{ item.key }} = {{ item.value }}"
    state: present
  run_once: true
  with_items:
    - { key: "listen_addresses", value: "'*'" }
